<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wonderful coloring</title>
      <link href="/2021/122018024.html"/>
      <url>/2021/122018024.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/qw13/20211220181722.png"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/qw13/20211220181735.png"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/qw13/20211220181712.png"></p><h2 id="题目释义"><a href="#题目释义" class="headerlink" title="题目释义"></a>题目释义</h2><p>字符串s的每一个字符颜色都是红绿白之一</p><p>规则：</p><ol><li>颜色相同的字符均两两不相等</li><li>红绿颜色字符数量相同</li><li>能涂的都要涂</li></ol><h1 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h1><p>如果暴力求解，则遍历所有情况为3的50次方，远远超时</p><p>观察得到涂的什么颜色并不影响判断，只需知道字符有没有被涂色。规则等价于</p><ol><li>涂色的数量为偶数</li><li>涂色的字符中相同的字符不超过2个</li></ol><p>若同时满足以上两个规则，则必然可以找出至少一种满足题设要求的涂色方案。</p><p>因为只需要：</p><ol><li>将成对出现的字符一个涂成红色，一个涂成绿色</li><li>剩下的单个出现的字符总数必然是个不相等且共有偶数个，那么一半涂红一半涂绿</li></ol><p>这样就得到了一个wonderful coloring</p><p>例：1表示红2表示绿</p><p>kzaaa，知道了11101</p><p>那就一个a涂红一个a涂绿，kz一个涂红一个涂绿</p><p>所以kzaaa 21102、12201等等都是wonderful coloring</p><p>所以只需一个数组标志每个字符涂没涂，判断</p><ol><li>有偶数个1</li><li>同一个字符最多出现2次</li></ol><p>由于要求的是被涂元素个数最多的情况，先考虑有小于s.length的最大偶数n个元素被涂色，若没找到最佳方案，n一次-2即可。</p><p>如何遍历？</p><p>问题相当于遍历从a1,a2,……an中选取k个元素的所有情况，选k个就需要k层循环，这基本上不可能简单的实现</p><p>进一步思考，只需要：</p><ol><li>选取偶数个成单元素涂色</li><li>选取<strong>任意数量的成对元素</strong></li></ol><p>例如pakawdac，只需要列出一个表记录每个字符出现的个数：</p><p>p,k,w,d,c各出现1次，a出现3次</p><p>则只需要从pkwdc五个中选4个涂色，选一对aa涂色即可。结果就是有三个涂成了红色。</p><p>记ou(a)表示不大于a的最大偶数</p><p>所以只需要记录：</p><p>n元素出现了1次，k个元素出现了多次</p><p>最终结果就是ou(n)/2+k</p><p>更进一步，只需要记录出现超过两次的字符，出现单次的字符用字符串长度减就可以了。</p><p>**算法关键: **</p><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p>每一组输入存入s[50],分别进行运算，结果储存在ans[T]中</p><pre class=" language-c++"><code class="language-c++">    int T;    cin >> T;    int ans[T];    int l = 0;    for (int i = 0;s i < T; ++i) {        char s[50];        cin >> s;        ans[l++] = solve(s);    }</code></pre><h2 id="运算逻辑"><a href="#运算逻辑" class="headerlink" title="运算逻辑"></a>运算逻辑</h2><p>函数solve：输入字符串</p><ol><li>num为单次出现字符数量，res为多次出现字符数量，ans为答案</li><li>因为数组删除元素困难，定义repeat专门存放已经计入结果的字母，当i指向下一个字符后判断该字符是否是repeat中的元素，如果是直接goto开启下一个循环即可</li><li>flag表示该字符出现过1次还是多次，以便对res或num进行增加。</li><li>核心：但凡找到一个s[j]=temp,直接break并将该字母记为重复。</li></ol><pre class=" language-c++"><code class="language-c++">int solve(const char *s) {    int ans;    int res = 0;    int num = 0;    char repeat[100];    int reLen = 0;    int flag = 1;//0多次出现1多出现一次    for (int i = 0; s[i]; ++i) {        char temp = s[i];        for (int j = 0; j < reLen; ++j) {            if (repeat[j] == temp) {                goto end;            }        }        for (int k = i + 1; s[k]; ++k) {            if (s[k] == temp) {                flag = 0;                res++;                repeat[reLen++] = temp;                break;            }        }        if (flag) {            num++;        }        flag = 1;        end:;    }    if (num % 2) { num--; }    ans = res + num/2;    return ans;}</code></pre><h2 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h2><pre class=" language-c++"><code class="language-c++">for (int i = 0; i < l; ++i) {    cout << ans[i] << endl;}</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>对于多组输入分开处理的input，建立答案数组储存每一个的答案。</li><li>通过对题意的分析得出了高效的算法。心路历程始终是：将逻辑陈述简化并逐步转变为可操作型语言。</li></ol>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数独游戏</title>
      <link href="/2021/122060671.html"/>
      <url>/2021/122060671.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><p><strong>算法关键:</strong></p><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><h3 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h3><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 散题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速部署静态博客</title>
      <link href="/2021/121946563.html"/>
      <url>/2021/121946563.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>hexo d错误率太高了，经常出现spawn failed，这时候就需要再次</p><pre class=" language-c"><code class="language-c">删除文件<span class="token punctuation">.</span>deploy_githexo clhexo ghexo d</code></pre><h1 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h1><p>博客根目录下有文件package.json</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211219164412.png"></p><p>其中</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211219164350.png"></p><p>紫色字代表gitbush中输入的npm run 的内容,冒号后的字符串表示实际运行的指令内容</p><pre class=" language-c"><code class="language-c">npm run build实际上运行的是：hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo serve</code></pre><p>所以可以把删除操作加入到deploy操作中去</p><pre class=" language-c"><code class="language-c"><span class="token string">"deploy"</span><span class="token punctuation">:</span> <span class="token string">"rm -rf .deploy_git &amp;&amp; hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</span><span class="token punctuation">,</span></code></pre><p>这样在gitbush中输入npm run deploy，执行的就是</p><ol><li>强制删除.deploy_git文件</li><li>hexo三连</li></ol><p>此后运行</p><pre class=" language-c"><code class="language-c">npm run deploy</code></pre><p>即可实现一键上传，再出现spawn failed就之间重新粘贴运行这句话就行了，再也不用上传出错就手动删文件夹、hexo三连了</p><p>类似的，也可以将build改成</p><pre class=" language-c"><code class="language-c"><span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo serve"</span><span class="token punctuation">,</span></code></pre><p>运行</p><pre class=" language-c"><code class="language-c">npm run build</code></pre><p>即可一键重置静态资源并且创建本地服务器了</p><p>当然，也可以随意将deploy、build改成其它的名字，或者改变他们所代表的命令。</p><p>如果不幸用的是rm -r(比如说我)</p><p>那就有一个重要的问题：删除文件时系统会询问是否要将文件删除</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211219165058.png"></p><p>这不累死个人</p><p>所以需要关闭rm提示</p><p>运行指令：</p><pre class=" language-c"><code class="language-c">touch <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc</code></pre><p>在c盘的用户文件中会生成一个.bashrc，gitbush每次启动都会读取里边的内容。</p><p>运行指令打开文件</p><pre class=" language-c"><code class="language-c">start <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc</code></pre><p>在文件内输入：</p><pre class=" language-c"><code class="language-c">alias rm<span class="token operator">=</span><span class="token string">'rm -f'</span></code></pre><p>这里-f就是不询问，如果是-i就是询问。注意rm和=之间没有空格</p><p>保存文件，运行指令使更改生效</p><pre class=" language-c"><code class="language-c">source <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bashrc</code></pre><p>再次gitbash here，提示缺少文件.bash_prodile</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211219165814.png"></p><p>用和上面类似的命令新建即可</p><pre class=" language-c"><code class="language-c"> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bash_profile</code></pre><p>打开c盘的用户文件夹，果然都在</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211219165958.png"></p><p>再次gitbash here，果然没有报错。运行</p><pre class=" language-c"><code class="language-c">rm <span class="token operator">-</span>r <span class="token punctuation">.</span>deploy_git</code></pre><p>文件夹被删除的干干净净</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211219170757.png"></p><p>运行一下发现：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211219170955.png"></p><p>仍然会询问是否删除文件。。。。</p><p>所以，还是用rm -rf吧</p>]]></content>
      
      
      <categories>
          
          <category> hexo优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/2021/121833510.html"/>
      <url>/2021/121833510.html</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><h3 id="多项式的表示"><a href="#多项式的表示" class="headerlink" title="多项式的表示"></a>多项式的表示</h3><p>关键信息：项数，系数及指数i</p><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><p>数组的每个分量是系数与指数对应的二元组</p><h4 id="链表存储"><a href="#链表存储" class="headerlink" title="链表存储"></a>链表存储</h4><p>每个节点存储系数与指数，指针指向下一个节点</p><h2 id="顺序存储实现"><a href="#顺序存储实现" class="headerlink" title="顺序存储实现"></a>顺序存储实现</h2><h3 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h3><p>利用数组的连续存储空间来存放线性表的各种元素</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> ListNode <span class="token punctuation">{</span>    ElementType Data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>data存放数据，last指示最后一个有效元素的位置</p><p>两种查找方式：</p><ol><li>定义结构体指针</li></ol><pre class=" language-c"><code class="language-c">ListNode <span class="token operator">*</span>Ptrl<span class="token punctuation">;</span>ptrl<span class="token operator">-></span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>定义结构体对象</li></ol><pre class=" language-c"><code class="language-c">ListNode list<span class="token punctuation">;</span>list<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong>所有数据都存放在这一个结构体中</strong></p><p>这种存储方式查找很简单，但插入和删除很不方便，需要挪动很多元素</p><h3 id="结构体数组实现"><a href="#结构体数组实现" class="headerlink" title="结构体数组实现"></a>结构体数组实现</h3><p><strong>数组元素即是结点</strong>，所以只需要用id表示结点位置,now指示有效元素下一个。</p><h4 id="单向"><a href="#单向" class="headerlink" title="单向"></a>单向</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> MAXSIZE <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">int</span> nextid<span class="token punctuation">;</span><span class="token punctuation">}</span>nodes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="双向"><a href="#双向" class="headerlink" title="双向"></a>双向</h4><pre class=" language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> MAXSIZE <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> preid<span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">int</span> nextid<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>插入删除类似</p><p>可以使用node在nodes中的下标作为node的id，所以可以省掉id这个变量。</p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>令nodes[0]和nodes[1]相互指，后续添加的node在这两个结点中间。这样链表id一定以0开始以1结束</p><pre class=" language-c++"><code class="language-c++">void init() {    nodes[0].nextid = 1;    nodes[1].preid = 0;    now = 2;}</code></pre><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><pre class=" language-c++"><code class="language-c++">for(int i = nodes[0].nextid; i != 1; i=nodes[i].nextid){    pass;}</code></pre><h2 id="链式存储实现"><a href="#链式存储实现" class="headerlink" title="链式存储实现"></a>链式存储实现</h2><p>不要求逻辑相邻的元素物理上相邻，用过链建立联系</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> ListNode <span class="token punctuation">{</span>    ElementType Data<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ListNode <span class="token operator">*</span>Ptrl<span class="token punctuation">;</span></code></pre><h3 id="主要操作"><a href="#主要操作" class="headerlink" title="主要操作"></a>主要操作</h3><h4 id="求表长"><a href="#求表长" class="headerlink" title="求表长"></a>求表长</h4><p>p不为空时循环，计数器加一</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>ptrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> ptrl<span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><h5 id="按序号"><a href="#按序号" class="headerlink" title="按序号"></a>按序号</h5><p>查找序号为k的元素</p><p>p不等于空（链表没结束）和i&lt;k时循环，p指向下一个，i++，循环结束就有两种情况：</p><ol><li>p为空，此时i != k，意味着链表结束，返回NULL</li><li>i==k，返回p</li></ol><pre class=" language-c"><code class="language-c">ListNode <span class="token operator">*</span><span class="token function">FindKth</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> ListNode ptrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> prtl<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//两种情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="按值"><a href="#按值" class="headerlink" title="按值"></a>按值</h5><p>p不等于空且Data不等于key时循环，结束也是两种情况</p><ol><li>p为空，没找到，返回p</li><li>找到了，返回p</li></ol><pre class=" language-c"><code class="language-c">ListNode <span class="token operator">*</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> ListNode ptrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode <span class="token operator">*</span>p <span class="token operator">=</span> ptrl<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>Data <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h4><p>循环使p不断向下指，循环条件记得有链表未结束，即p不等于空</p><p>判断一下循环结束后的情况</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><ol><li>构造新节点，用s指向</li><li>找到链表的第k-1个节点，用p指向</li><li>修改指针，插入s<pre><code>           1. s指向p-&gt;next                 2. p-&gt;next指向s</code></pre></li><li>返回链表<strong>头指针</strong></li></ol><p>如果插入的位置是链表头则做特殊处理，注意p指向空的情况。</p><pre class=" language-c"><code class="language-c">ListNode <span class="token operator">*</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>ptrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode <span class="token operator">*</span>p<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>Data <span class="token operator">=</span> x<span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> prtl<span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> <span class="token function">FindKth</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ptrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">-></span>Data <span class="token operator">=</span> x<span class="token punctuation">;</span>        s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>        <span class="token keyword">return</span> ptrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除下标为i的结点s</p><ol><li>找到第i-1个结点p</li><li>s指向被删除元素</li><li>p-&gt;next指向s-&gt;next</li><li><strong>free(s)</strong></li><li>返回头指针</li></ol><p>若i==1</p><ol><li>s=ptrl</li><li>ptrl指向ptrl的next</li><li>free(s)</li></ol><p>因为要的free，所以第一步的赋值是必要的</p><pre class=" language-c"><code class="language-c">ListNode <span class="token operator">*</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> ListNode ptrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode p<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> ptrl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptrl <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ptrl <span class="token operator">=</span> ptrl<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ptrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> <span class="token function">FindKth</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ptrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ptrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="插入删除共同点"><a href="#插入删除共同点" class="headerlink" title="插入删除共同点"></a>插入删除共同点</h3><ol><li>对链表头进行操作时均需特殊处理</li><li>p使用FindKth函数指向操作对象前一个节点</li><li>注意p为空的情况</li></ol><h2 id="STL-list"><a href="#STL-list" class="headerlink" title="STL-list"></a>STL-list</h2><p>是<strong>双向链表</strong></p><ol><li><p>定义</p><pre class=" language-c++"><code class="language-c++">list<int>node;</code></pre></li><li><p>赋值</p><pre class=" language-c++"><code class="language-c++">node.push_back(value);</code></pre></li><li><p>遍历</p><p>使用it迭代器</p><pre class=" language-c++"><code class="language-c++">list<int>::iterator it = node.begin();while(node.size()>1){    it++;    pass;}</code></pre><p>it相当于指向链表元素的指针</p></li><li><p>删除</p><pre class=" language-c++"><code class="language-c++">node.erase(it);</code></pre></li><li><p>插入</p><pre class=" language-c++"><code class="language-c++">node.insert(it,value);</code></pre></li></ol><h2 id="广义表和多重链表"><a href="#广义表和多重链表" class="headerlink" title="广义表和多重链表"></a>广义表和多重链表</h2><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><p>是线性表的推广。</p><blockquote><p>线性表的元素都是基本的单元素</p><p>广义表的元素还可以是另一个广义表</p></blockquote><p>组成：</p><ol><li>tag，0表示存的是单元素，1表示存的是广义表</li><li>子表指针域和单元素数据与复用，使用共用体</li><li>next结构体指针</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> gNode <span class="token punctuation">{</span>    <span class="token keyword">int</span> tag<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标志域：0单元素，1广义表</span>    <span class="token keyword">union</span> <span class="token punctuation">{</span>        ElementType Data<span class="token punctuation">;</span>        gNode <span class="token operator">*</span>subList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    gNode<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre><h3 id="多重链表"><a href="#多重链表" class="headerlink" title="多重链表"></a>多重链表</h3><p>结点可同时隶属于多个链</p><blockquote><p>指针会有多个</p><p>包含多个指针域不一定是多重链表</p></blockquote><h2 id="查找操作的优化"><a href="#查找操作的优化" class="headerlink" title="查找操作的优化"></a>查找操作的优化</h2><p>插入n个结点复杂度是O(n^2)，容易超时</p><p>可以额外创建一个迭代器类型的数组loc来定位值为x的结点存在哪个位置上</p><pre class=" language-c++"><code class="language-c++">list<int>::iterator loc[MAXSIZE];</code></pre><p>loc[x]=iterator就表示值为x的结点存放在iterator所指的地址中。</p><p>这样当需要查找值为x的结点只需要:</p><pre class=" language-c++"><code class="language-c++">iterator = loc[x];</code></pre><p>成功将查找所需的O(n)变成了O(1)</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211218202553.png"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211218202620.png"></p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>对于第一辆以后的每一辆车的xyz：</p><ol><li>找到链表中值为y的位置</li><li>1就把x插入右边，0就把x插入左边</li></ol><h2 id="STL实现"><a href="#STL实现" class="headerlink" title="STL实现"></a>STL实现</h2><ol><li><p>初始化</p><pre class=" language-c++"><code class="language-c++">list<int> L;scanf("%ld %ld",&n,&x);L.push_back(x);         //插入刚开始编号loc[x] = L.begin();     //迭代器地址存入数组list<int>::iterator temp;</code></pre></li><li><p>对于每一辆车</p><ol><li><p>输入</p><pre class=" language-c++"><code class="language-c++">cin>>a>>b>>c;//a,b,c就是x,y,ztemp = loc[b];</code></pre></li><li><p>判断</p><ol><li>c==0</li></ol><pre class=" language-c++"><code class="language-c++">L.insert(temp,a);loc[a] = --temp;</code></pre><ol start="2"><li>c==1</li></ol><pre class=" language-c++"><code class="language-c++">L.insert(++temp,a);loc[a] = --temp;</code></pre></li></ol></li><li><p>输出链表</p><pre class=" language-c++"><code class="language-c++">for(list<int>::iterator it=L.begin();it!=L.end();it++){    cout<<*it<<" ";}</code></pre></li></ol><h2 id="手写链表"><a href="#手写链表" class="headerlink" title="手写链表"></a>手写链表</h2><p>使用结构体数组实现比较简单</p><ol><li><p>定义结构体数组和定位数组</p><pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> perid<span class="token punctuation">;</span>    <span class="token keyword">int</span> nextid<span class="token punctuation">;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span>nodes<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> loc<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指示有效元素下一个</span></code></pre></li><li><p>实现双向链表基本操作</p><p>初始化：所有的元素都插入到nodes[0]和nodes[1]之间，这样这个链表一定是以id为0开始，id为1结束</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nextid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    nodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>perid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    now <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>插入：把a插到k右边</p><pre class=" language-c++"><code class="language-c++">void insert(int k, int a) {    nodes[now].data = a;    loc[a] = now;    nodes[now].nextid = nodes[k].nextid;    nodes[nodes[k].nextid].preid = now;    nodes[k].nextid = now;    nodes[now].preid = k;    now++;}</code></pre></li><li><p>运算</p><ol><li><p>初始化</p><pre class=" language-c++"><code class="language-c++">int n;cin >> n;init();int a;cin >> q;insert(0,a);n--;</code></pre></li><li><p>根据输入插入元素</p><pre class=" language-c++"><code class="language-c++">while(n--){    int x,y,z;    cin >> x,y,z;    if(z == 0){        insert(nodes[loc[y]].perid, x);    }else{        insert(locate[y],x);    }}</code></pre></li><li><p>输出链表</p><pre class=" language-c++"><code class="language-c++">for(int i=nodes[0].nextid;i!=1;i=nodes[i].nextid){    cout << nodes[i].data << " ";}</code></pre></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度</title>
      <link href="/2021/121240472.html"/>
      <url>/2021/121240472.html</url>
      
        <content type="html"><![CDATA[<h1 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h1><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211212155629.png"></p><p>算法很简单，但即使是unsigned long long 连21!都装不下，更不要说1000!了</p><h2 id="算法内容"><a href="#算法内容" class="headerlink" title="算法内容"></a>算法内容</h2><p>核心：用一个数组A[]，A[0]~A[n]分别存储大数的个位到第n位</p><p>注意：大的静态数组应该定义在<strong>全局</strong></p><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h3 id="大数与具体的数"><a href="#大数与具体的数" class="headerlink" title="大数与具体的数"></a>大数与具体的数</h3><h4 id="相乘"><a href="#相乘" class="headerlink" title="相乘"></a>相乘</h4><ol><li><p>当前位*数+进位</p><pre class=" language-c++"><code class="language-c++">A[i] = A[i]+carry;</code></pre></li><li><p>令A[i]=个位的数，carry=其它位上的数</p><pre class=" language-c++"><code class="language-c++">carry = A[i]/10;A[i] %= 10;</code></pre><p>例：第一步结果为254，A[i]=4，carry=25</p></li></ol><p>​            故具体代码为：</p><pre class=" language-c++"><code class="language-c++">int A[10000];//全局变量int carry = 0;for (int & i : A) {    i = i * num + carry;    carry = i / 10;    i = i % 10;}</code></pre><p>​    例：26*37（A中存了37）</p><p>​    步骤：</p><ol><li>26*7=182，2存入A[0]，18留着进一步运算</li><li>26*3=78，78+18=96，这时虽然得到了答案962，但是A需要把9和6分开存放，所以将6存入A[1],9留着进一步运算</li><li>26*0+9=9，将9存入A[2],运算完成。</li></ol><p>​     运算过程基本跟列竖式相同。</p><p>若用字符串储存大数</p><h3 id="大数与大数"><a href="#大数与大数" class="headerlink" title="大数与大数"></a>大数与大数</h3><p><strong>注意：</strong></p><ol><li>大数只能通过字符串读入！！！</li><li>注意大数是正着存还是反着存</li></ol><h4 id="相加"><a href="#相加" class="headerlink" title="相加"></a>相加</h4><p>​    大数不超过100位</p><ol><li><p>遍历大数A、B</p></li><li><p>sum[i]=A[i]+B[i]+carry</p></li><li><p>carry=十位，sum[i]=个位</p><pre class=" language-c++"><code class="language-c++">for(int i = a.size()-1,j = b.size()-1;i >= 0||j >= 0||c > 0;i--,j--){    if(i>=0)        c += a[i]-'0';    if(j>=0)        c += b[j]-'0';    s += (c%10)+'0';    c /= 10;}reverse(s.begin(),s.end());</code></pre></li></ol><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ol><li><p>先寻找到最高位</p><pre class=" language-c++"><code class="language-c++">int last = 0;for (int i = 10000 - 1; i >= 0; --i) {    if (A[i] != 0) {        last = i;        break;    }}</code></pre></li><li><p>然后按位输出</p><pre class=" language-c++"><code class="language-c++">for (int i = last; i >= 0; --i) {    cout << A[i];}</code></pre></li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>不用看了，python不用处理大数</p><ol><li><p>阶乘</p><pre class=" language-python"><code class="language-python">N <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ans <span class="token operator">*=</span> i     <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span></code></pre></li><li><p> 大数相加</p></li></ol><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>大数存储方向决定遍历方式</li><li>若用字符串存储大数：<ol><li>取出时char-‘0’将字符变为整型</li><li>存入时int+‘0’,将整型变为字符</li><li>注意结果字符串的储存方向，反向时需要reverse（ans.begin(),ans.end()）进行调换方向</li></ol></li></ol><p>​    3. 大数与大数运算需要在同一个循环体内设2个变量，代表同时遍历两个大数。</p><p>​                </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符匹配</title>
      <link href="/2021/120940818.html"/>
      <url>/2021/120940818.html</url>
      
        <content type="html"><![CDATA[<h1 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/%7DCEWNW2T%7BZWIVF5W43$RSZE.png"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209213543.png"></p><p>##算法设计<br><strong>算法关键:</strong></p><ol><li><p>遍历子数组左上角</p><p>i从0到n-b+1,j从0到m-a+1</p><p>遍历这个子数组，不相同ret就设为0；</p></li></ol><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><p>扫描n,m,a,b</p><p>A[n][m]存原矩阵</p><p>扫描q</p><p>q次循环</p><p>​    B[a][b]存子矩阵</p><p>​    调用算法</p><p>​    将结果存在ans数组中</p><p>代码很简单</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> B<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> valEn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存B</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>按照算法写出代码</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> B<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> q<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> valEn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存B</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>​    <img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209221358.png"></p><p>矩阵是char类型的，加上一些对缓冲区的修改</p><p>加入调试语句输出A、B</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> DEBUG</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209222958.png"></p><p>输入正常了</p><p>测试</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209225653.png"></p><p>发现是比较时对B的调用有问题，改为列指针调用B</p><p>删除标志变量，改用更简洁的goto：但凡不相等，就到结束标记点</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> ans<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> valEn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//存B</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//解决</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a[j][k]是子数组左上角元素</span>                <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> hang <span class="token operator">=</span> j<span class="token punctuation">;</span> hang <span class="token operator">&lt;</span> j <span class="token operator">+</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>hang<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> lie <span class="token operator">=</span> k<span class="token punctuation">;</span> lie <span class="token operator">&lt;</span> k <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>lie<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>hang<span class="token punctuation">]</span><span class="token punctuation">[</span>lie<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>num<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">goto</span> end<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                end<span class="token punctuation">:</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>valEn<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>样例正确</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211209233042.png"></p><p>样例正确</p><p>但是WA了</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/QQ%E5%9B%BE%E7%89%8720211209233215.png"></p><p>习惯了。。。。</p><p>测试一下</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/QQ%E5%9B%BE%E7%89%8720211209233449.png"></p><p>确实没看出来有啥问题</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
          <category> 中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九宫格</title>
      <link href="/2021/120723611.html"/>
      <url>/2021/120723611.html</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>##算法设计：<br><strong>算法关键:</strong></p><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><h3 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h3><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
          <category> 中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公式求值</title>
      <link href="/2021/120456896.html"/>
      <url>/2021/120456896.html</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="公式求值"><a href="#公式求值" class="headerlink" title="公式求值"></a>公式求值</h2><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204151746.png"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204151804.png"></p><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><p><strong>算法关键:</strong> 组数A[n]存放从1到n的阶乘值，运算时直接调用即可。把i的k次方存到一个临时变量，下一个i^k只需要temp*i</p><ol><li><strong>把1到n的阶乘值依次存入A[n]</strong></li><li>直接循环累加即可</li></ol><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A[i]=(i+1)!</span></code></pre><h3 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h3><ol><li><p>打印从1到n的阶乘表</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> DEBUG</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>条件编译语句内部是对应的输出语句，方便后续调试用的</p></li><li><p>进行循环累加</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> DEBUG</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A[n-1]=%d,A[n-m-1]=%d,A[n-i-1]=%d,A[m-1]=%d,pow(i,k)=%d"</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>               A<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>n <span class="token operator">-</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><pre class=" language-c"><code class="language-c">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token operator">%</span><span class="token number">999101</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="调试运行"><a href="#调试运行" class="headerlink" title="调试运行"></a>调试运行</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204155647.png"></p><p>可以看到在第三次运行时由于i=n，在调用A[n-i-1]时数组下标越界</p><p>所以可以加一个<strong>缓冲量</strong></p><p>让A[i]表示i！,A[0]初始化为1，这样既解决了下标越界的问题，也使接下来的读取更加简洁</p><p>打印A[i]修改为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A[i]=i!</span>    A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>后边的运算部分就可以把所有的-1都删掉了</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> DEBUG</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A[n]=%d,A[n-m]=%d,A[n-i]=%d,A[m]=%d,pow(i,k)=%d"</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> m<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span>               A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        ans <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>n <span class="token operator">-</span> m<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>n <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>再次运行</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204160153.png"></p><p>得到了正确的结果</p><p>开开心心提交</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204160404.png"></p><p>果然难度不是吹的</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211204160453.png"></p><p>一大半的运行时错误</p><p>这个算法有问题，因为计算10000！是不可能的</p><p>稍微化简一下</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">mul</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token function">pow</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">mul</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">mul</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//计算(a-b)!</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还是运行时错误</p><p>看了下答案，麻了</p><pre class=" language-c"><code class="language-c">import java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigDecimal<span class="token punctuation">;</span>import java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>public class Main <span class="token punctuation">{</span>    public final <span class="token keyword">static</span> BigDecimal P <span class="token operator">=</span> new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">999101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public final <span class="token keyword">static</span> BigDecimal TWO <span class="token operator">=</span> new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fac <span class="token operator">=</span> new <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">999101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">long</span> mod <span class="token operator">=</span> <span class="token number">999101</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> new <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    public <span class="token keyword">static</span> BigDecimal n<span class="token punctuation">;</span>    public <span class="token keyword">static</span> BigDecimal m<span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> new <span class="token function">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> new <span class="token function">BigDecimal</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// n</span>        m <span class="token operator">=</span> new <span class="token function">BigDecimal</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// m</span>        k <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// k</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">7349813</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token number">3590741</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 原题第四个数据貌似输出有误，正确应该输出为0</span>        <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">591101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">getfac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 预处理</span>            BigDecimal lc <span class="token operator">=</span> <span class="token function">Lucas</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lc<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">getdp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 预处理系数</span>                <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0l</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最终值</span>                <span class="token keyword">int</span> i<span class="token punctuation">;</span>                <span class="token keyword">long</span> p <span class="token operator">=</span> <span class="token function">binpow</span><span class="token punctuation">(</span>TWO<span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 预处理2^(n-k)求模: 二项式定理</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span>                    ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>                ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token punctuation">(</span>lc<span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getdp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 计算系数求模</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1l</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> N <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// n % 999101</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> j <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> mod <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> mod <span class="token operator">*</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Lucas定理：组合数求模</span>    public <span class="token keyword">static</span> BigDecimal <span class="token function">Lucas</span><span class="token punctuation">(</span>BigDecimal n<span class="token punctuation">,</span> BigDecimal m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigDecimal ret <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span>ONE<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ret <span class="token operator">=</span> ret                    <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>new <span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token function">binpow</span><span class="token punctuation">(</span>fac<span class="token punctuation">[</span>a <span class="token operator">-</span> b<span class="token punctuation">]</span> <span class="token operator">*</span> fac<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">,</span> mod <span class="token operator">-</span> <span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 预处理[0,P-1]的阶乘求模 0! 1！ 2！ 3! ..... 999100!</span>    public <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getfac</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        fac<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1l</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mod<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fac<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fac<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> i <span class="token operator">%</span> mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 模意义下取幂算法 -- 取模的运算不会干涉乘法运算</span>    <span class="token comment" spellcheck="true">// 大数快速取幂</span>    public <span class="token keyword">static</span> BigDecimal <span class="token function">binpow</span><span class="token punctuation">(</span>BigDecimal a<span class="token punctuation">,</span> BigDecimal b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        BigDecimal res <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span>ONE<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ZERO<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>TWO<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span>ONE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">divideAndRemainder</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            b <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>TWO<span class="token punctuation">,</span> BigDecimal<span class="token punctuation">.</span>ROUND_DOWN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 普通数快速取幂</span>    public <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">binpow</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>        <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> res <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>            a <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">%</span> mod<span class="token punctuation">;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这种题需要很强的数学知识。。。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>人没了</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
          <category> 中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组不到的数字</title>
      <link href="/2021/120361679.html"/>
      <url>/2021/120361679.html</url>
      
        <content type="html"><![CDATA[<h1 id="组不到的数字"><a href="#组不到的数字" class="headerlink" title="组不到的数字"></a>组不到的数字</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203201401.png"></p><p>##算法设计<br>**算法关键:**可以穷举，但i需要在哪里停止？</p><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><p>很简单</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h3><ol><li><p>数i=j*a+k*b,通过循环来模拟数值变化</p></li><li><p>如果不满足等式，就更新ans</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token punctuation">:</span> b<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a的系数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//b的系数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i ！<span class="token operator">=</span> a <span class="token operator">*</span> j <span class="token operator">+</span> b <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ans <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203202858.png"></p><p>呃，跟测试数据差了那么一点点</p><p>27=5*4+7，说明j有问题</p><p>写的时候先入为主认为b是a和b中较小的那个了，修改一下主方法</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> max<span class="token operator">=</span>a<span class="token operator">></span>b<span class="token operator">?</span>a<span class="token punctuation">:</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token function">solve</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token operator">-</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>让max等于a和b中较大的那个，传入max和a+b-max。（a+b）-max就是较小的那个。</p><p>再次运行结果没变，因为算法错了，不是但凡不相等就赋值。在i等于一个值时，总会有对应的j、k组合让等式不相等。这时应该使用标志变量</p><p>重新写一下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> isEqual <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a的系数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//b的系数</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> a <span class="token operator">*</span> j <span class="token operator">+</span> b <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isEqual <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEqual<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isEqual <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样就是在内层循环结束后，<strong>但凡找到了令等式成立的j、k组合就不进行赋值</strong></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203204342.png"></p><p>得到了正确的结果。</p><p>开开心心提交</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203204447.png"></p><p>超时了，不过比爆红要好。</p><p>该算法对于每一个i都要从头开始算一遍，非常的耗时间</p><p>建立一个二维数组dp[a][b],把i*a+j*b存到dp[i][j]中，这样对于下一个i循环是可以直接调取数组中相应位置的内容</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> isEqual <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a的系数i</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//b的系数j</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        k<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第一行</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一行加a</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isEqual <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEqual<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isEqual <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再次提交</p><p>时间更长了，原来是对于每个i又重新打了一个表，再次更改一下</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> isEqual<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//a的系数i</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//b的系数j</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    k<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第一行</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一行加a</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    isEqual<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isEqual<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isEqual<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看起来多了个循环，实际上只打了一次表，将复杂度降了一个量级。</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203211635.png"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203214143.png"></p><p>还是差一点，那就让i从大向小找，这样找到的第一个数就是ans的值</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> i <span class="token operator">></span> a<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><p>最终还是成功了</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/20211203220519.png"></p><p>看到ac这一刻感觉一切都值了</p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
          <category> 中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 中等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兰顿蚂蚁</title>
      <link href="/2021/120120761.html"/>
      <url>/2021/120120761.html</url>
      
        <content type="html"><![CDATA[<h1 id="兰顿蚂蚁"><a href="#兰顿蚂蚁" class="headerlink" title="兰顿蚂蚁"></a>兰顿蚂蚁</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201195850546.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201195931956.png"></p><h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><p><strong>关键词：</strong>模拟</p><h3 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h3><ol><li>地图存入n行m列的数组A[n][m];</li><li>坐标存入point[2];</li><li>方向dir;</li><li>步数step;</li></ol><p><strong>代码如下：</strong></p><pre class=" language-c"><code class="language-c">    <span class="token comment" spellcheck="true">//输入处理</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//m行n列</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> map<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> point<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> dir<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>实操时发现创建一个变量currDir表示当前方向，*dir表示所有方向会更方便</p><p>修改为：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">char</span> curDir<span class="token punctuation">;</span>    <span class="token keyword">char</span> dir<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>carDir<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样就可以通过dir下标的加减实现方向的改变了</p><p>但这时又出现了新的问题：</p><p>​    当curDir=‘L’时，若刚好为=需要右转（即下标+1）则会出现数组下标越界的情况。</p><p>所以我们可以设置两个“<strong>缓冲量</strong>”：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> dir<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>循环调用时下标从1到4即可。</p><p>故：</p><ol><li>对于“模拟”类型的问题设置一个“<strong>当前量</strong>”可以方便问题求解</li><li>数组下标越界可以通过设置“缓冲量”来解决</li></ol><h3 id="算法逻辑"><a href="#算法逻辑" class="headerlink" title="算法逻辑"></a>算法逻辑</h3><p>核心：模拟蚂蚁的行为</p><ol><li>根据蚂蚁所在格子类型改变方向和格子类型：</li></ol><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token function">changeDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>map<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> type <span class="token operator">=</span> map<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转向</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir<span class="token operator">=</span>dir<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    map<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">!</span>type<span class="token punctuation">;</span>    <span class="token keyword">return</span> curDir<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>根据方向改变坐标：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">changePoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'U'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'R'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>循环调用函数且step++：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> curStep<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> map<span class="token punctuation">,</span> curDir<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curStep<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>curStep<span class="token operator">!=</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里使用了当型循环，用for也一样。</p></li></ol><h3 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h3><pre class=" language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201222527762.png"></p><p>。。。。</p><p>司空见惯了，找问题吧</p><hr><p>原来是忘记调用changeDir函数了，立即修改：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">int</span> curStep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token function">changePoint</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curDir <span class="token operator">=</span> <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> map<span class="token punctuation">,</span> curDir<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curStep<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>curStep <span class="token operator">!=</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>再次测试~</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201222527762.png"></p><p>呃。。。。</p><p>继续找吧，小事。</p><p>在适当位置增加输出语句进行调试：</p><ol><li><p>输入测试：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %c %d"</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>curDir<span class="token punctuation">,</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201223527275.png" alt="image-20211201223527275"></p><p>立马找到了问题所在：</p><ol><li>curDir扫描失败：缓冲区里的空格赋值给了curDir，这是个老问题了。</li></ol><pre class=" language-c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解决：**%c前加空格忽略缓冲区中的空白字符**</p><pre class=" language-c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>step扫描失败：遇到了‘L’这个非法字符导致扫描停止。</li></ol></li></ol><p>​        修改后再次运行：<img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201224142614.png"></p><p>​        输入没问题了，但结果还是有问题</p><p>​    下面测试changeDir函数</p><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token function">changeDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>map<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> type <span class="token operator">=</span> map<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"type=%d "</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转向</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    map<span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">!</span>type<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"curDir=%c "</span><span class="token punctuation">,</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curDir<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        运行发现没有输出，说明没有调用该函数，而changePoint应该不会出问题，那么问题很可能    出在二维数组map的调用上。</p><p>​    新增一个列指针p，通过列指针p来实现二维数组map的调用</p><p>​    定义及初始化：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><pre class=" language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token function">changeDir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> type <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token operator">+</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"type=%d "</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//转向</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span><span class="token punctuation">(</span>p <span class="token operator">+</span> point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token operator">+</span> point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">!</span>type<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"curDir=%c "</span><span class="token punctuation">,</span> curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curDir<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>运行发现终于出结果了：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201231013379.png"></p><p>仔细一看怎么不对，答案是1，3</p><p>那应该是移动也就是changePoint出了问题</p><p>果然，题目中point[0]、point[1]分别表示行和列，而在函数中我因为习惯将其当成了坐标进行计算</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">changePoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'U'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'R'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>修改后：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">changePoint</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>point<span class="token punctuation">,</span> <span class="token keyword">char</span> curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>curDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'U'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'R'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'L'</span><span class="token punctuation">:</span>            point<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再次运行：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201231329428.png"></p><p>得到了正确的结果</p><p>开开心心提交：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211201231451702.png"></p><p>。。。</p><p>对了但没完全对，还有一些情况没考虑。</p><p>首先，发现在changrDir里少了个brake；</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>改为</p><pre class=" language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>curDir <span class="token operator">==</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> type<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curDir <span class="token operator">=</span> dir<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>运行发现样例结果错了，说明之前的样例通过是个巧合。</p><p>然后主方法用do-while会导致计数困难，还是使用fori</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> step<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">changePoint</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curDir<span class="token operator">=</span> <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>curDir<span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>运行：</p><p>在changDir处加入输出语句，输出point坐标和该位置改变后的值</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211202121926497.png"></p><p>找到问题是应该先调用changeDir函数。犯这个错误的原因是一开始以为需要先走后改变方向。</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> step<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">changePoint</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        curDir<span class="token operator">=</span> <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>curDir<span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>修改后：</p><pre class=" language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> step<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        curDir<span class="token operator">=</span> <span class="token function">changeDir</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>p<span class="token punctuation">,</span>n<span class="token punctuation">,</span>curDir<span class="token punctuation">,</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">changePoint</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span>curDir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>样例输出正常，再次提交：</p><p><img src="https://cdn.jsdelivr.net/gh/miaostudy/-/miaostudy/image-20211202123208869.png"></p><p>终于迎来了胜利！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>模拟类题目需定义一套“<strong>当前量</strong>”来表示<strong>模拟对象当前的状态</strong></li><li>数组下标可能越界时可设置几个<strong>缓冲量</strong></li><li>思考二维数组还是以“<strong>i行j列</strong>”的形式进行</li><li>当二维数组行和列长度为变量时，想要作为实参传递需要定义<strong>列指针</strong>*p，*p=a[0];,将*p和列长n作为实参传入函数</li></ol>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
          <category> 中等 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝桥杯 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
